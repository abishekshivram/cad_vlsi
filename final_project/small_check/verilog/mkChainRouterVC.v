//
// Generated by Bluespec Compiler, version untagged-g5f8fb782 (build 5f8fb782)
//
// On Tue Dec  7 14:48:56 IST 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_put_value                  O     1 reg
// get_valueVC1                   O    32 reg
// RDY_get_valueVC1               O     1 reg
// get_valueVC2                   O    32 reg
// RDY_get_valueVC2               O     1 reg
// get_valueVC3                   O    32 reg
// RDY_get_valueVC3               O     1 reg
// get_valueVC4                   O    32 reg
// RDY_get_valueVC4               O     1 reg
// get_valueVC5                   O    32 reg
// RDY_get_valueVC5               O     1 reg
// get_valueVC6                   O    32 reg
// RDY_get_valueVC6               O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_value_flit                 I    32 reg
// EN_put_value                   I     1
// EN_get_valueVC1                I     1
// EN_get_valueVC2                I     1
// EN_get_valueVC3                I     1
// EN_get_valueVC4                I     1
// EN_get_valueVC5                I     1
// EN_get_valueVC6                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkChainRouterVC(CLK,
		       RST_N,

		       put_value_flit,
		       EN_put_value,
		       RDY_put_value,

		       EN_get_valueVC1,
		       get_valueVC1,
		       RDY_get_valueVC1,

		       EN_get_valueVC2,
		       get_valueVC2,
		       RDY_get_valueVC2,

		       EN_get_valueVC3,
		       get_valueVC3,
		       RDY_get_valueVC3,

		       EN_get_valueVC4,
		       get_valueVC4,
		       RDY_get_valueVC4,

		       EN_get_valueVC5,
		       get_valueVC5,
		       RDY_get_valueVC5,

		       EN_get_valueVC6,
		       get_valueVC6,
		       RDY_get_valueVC6);
  parameter [31 : 0] my_addr = 32'b0;
  input  CLK;
  input  RST_N;

  // action method put_value
  input  [31 : 0] put_value_flit;
  input  EN_put_value;
  output RDY_put_value;

  // actionvalue method get_valueVC1
  input  EN_get_valueVC1;
  output [31 : 0] get_valueVC1;
  output RDY_get_valueVC1;

  // actionvalue method get_valueVC2
  input  EN_get_valueVC2;
  output [31 : 0] get_valueVC2;
  output RDY_get_valueVC2;

  // actionvalue method get_valueVC3
  input  EN_get_valueVC3;
  output [31 : 0] get_valueVC3;
  output RDY_get_valueVC3;

  // actionvalue method get_valueVC4
  input  EN_get_valueVC4;
  output [31 : 0] get_valueVC4;
  output RDY_get_valueVC4;

  // actionvalue method get_valueVC5
  input  EN_get_valueVC5;
  output [31 : 0] get_valueVC5;
  output RDY_get_valueVC5;

  // actionvalue method get_valueVC6
  input  EN_get_valueVC6;
  output [31 : 0] get_valueVC6;
  output RDY_get_valueVC6;

  // signals for module outputs
  wire [31 : 0] get_valueVC1,
		get_valueVC2,
		get_valueVC3,
		get_valueVC4,
		get_valueVC5,
		get_valueVC6;
  wire RDY_get_valueVC1,
       RDY_get_valueVC2,
       RDY_get_valueVC3,
       RDY_get_valueVC4,
       RDY_get_valueVC5,
       RDY_get_valueVC6,
       RDY_put_value;

  // register cycle
  reg cycle;
  wire cycle_D_IN, cycle_EN;

  // register my_id
  reg [31 : 0] my_id;
  wire [31 : 0] my_id_D_IN;
  wire my_id_EN;

  // ports of submodule input_link
  wire [31 : 0] input_link_D_IN, input_link_D_OUT;
  wire input_link_CLR,
       input_link_DEQ,
       input_link_EMPTY_N,
       input_link_ENQ,
       input_link_FULL_N;

  // ports of submodule vir_chnl_1
  wire [31 : 0] vir_chnl_1_D_IN, vir_chnl_1_D_OUT;
  wire vir_chnl_1_CLR,
       vir_chnl_1_DEQ,
       vir_chnl_1_EMPTY_N,
       vir_chnl_1_ENQ,
       vir_chnl_1_FULL_N;

  // ports of submodule vir_chnl_2
  wire [31 : 0] vir_chnl_2_D_IN, vir_chnl_2_D_OUT;
  wire vir_chnl_2_CLR,
       vir_chnl_2_DEQ,
       vir_chnl_2_EMPTY_N,
       vir_chnl_2_ENQ,
       vir_chnl_2_FULL_N;

  // ports of submodule vir_chnl_3
  wire [31 : 0] vir_chnl_3_D_IN, vir_chnl_3_D_OUT;
  wire vir_chnl_3_CLR,
       vir_chnl_3_DEQ,
       vir_chnl_3_EMPTY_N,
       vir_chnl_3_ENQ,
       vir_chnl_3_FULL_N;

  // ports of submodule vir_chnl_4
  wire [31 : 0] vir_chnl_4_D_IN, vir_chnl_4_D_OUT;
  wire vir_chnl_4_CLR,
       vir_chnl_4_DEQ,
       vir_chnl_4_EMPTY_N,
       vir_chnl_4_ENQ,
       vir_chnl_4_FULL_N;

  // ports of submodule vir_chnl_5
  wire [31 : 0] vir_chnl_5_D_IN, vir_chnl_5_D_OUT;
  wire vir_chnl_5_CLR,
       vir_chnl_5_DEQ,
       vir_chnl_5_EMPTY_N,
       vir_chnl_5_ENQ,
       vir_chnl_5_FULL_N;

  // ports of submodule vir_chnl_6
  wire [31 : 0] vir_chnl_6_D_IN, vir_chnl_6_D_OUT;
  wire vir_chnl_6_CLR,
       vir_chnl_6_DEQ,
       vir_chnl_6_EMPTY_N,
       vir_chnl_6_ENQ,
       vir_chnl_6_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_invert_cycle,
       CAN_FIRE_RL_read_input_link_and_send_to_VC_even,
       CAN_FIRE_RL_read_input_link_and_send_to_VC_odd,
       CAN_FIRE_get_valueVC1,
       CAN_FIRE_get_valueVC2,
       CAN_FIRE_get_valueVC3,
       CAN_FIRE_get_valueVC4,
       CAN_FIRE_get_valueVC5,
       CAN_FIRE_get_valueVC6,
       CAN_FIRE_put_value,
       WILL_FIRE_RL_invert_cycle,
       WILL_FIRE_RL_read_input_link_and_send_to_VC_even,
       WILL_FIRE_RL_read_input_link_and_send_to_VC_odd,
       WILL_FIRE_get_valueVC1,
       WILL_FIRE_get_valueVC2,
       WILL_FIRE_get_valueVC3,
       WILL_FIRE_get_valueVC4,
       WILL_FIRE_get_valueVC5,
       WILL_FIRE_get_valueVC6,
       WILL_FIRE_put_value;

  // remaining internal signals
  wire [31 : 0] b__h929;
  wire _0_CONCAT_input_link_first__1_BIT_31_2_3_EQ_my__ETC___d15,
       _0_CONCAT_input_link_first__1_BIT_31_2_3_SLT_my_ETC___d17;

  // action method put_value
  assign RDY_put_value = input_link_FULL_N ;
  assign CAN_FIRE_put_value = input_link_FULL_N ;
  assign WILL_FIRE_put_value = EN_put_value ;

  // actionvalue method get_valueVC1
  assign get_valueVC1 = vir_chnl_1_D_OUT ;
  assign RDY_get_valueVC1 = vir_chnl_1_EMPTY_N ;
  assign CAN_FIRE_get_valueVC1 = vir_chnl_1_EMPTY_N ;
  assign WILL_FIRE_get_valueVC1 = EN_get_valueVC1 ;

  // actionvalue method get_valueVC2
  assign get_valueVC2 = vir_chnl_2_D_OUT ;
  assign RDY_get_valueVC2 = vir_chnl_2_EMPTY_N ;
  assign CAN_FIRE_get_valueVC2 = vir_chnl_2_EMPTY_N ;
  assign WILL_FIRE_get_valueVC2 = EN_get_valueVC2 ;

  // actionvalue method get_valueVC3
  assign get_valueVC3 = vir_chnl_3_D_OUT ;
  assign RDY_get_valueVC3 = vir_chnl_3_EMPTY_N ;
  assign CAN_FIRE_get_valueVC3 = vir_chnl_3_EMPTY_N ;
  assign WILL_FIRE_get_valueVC3 = EN_get_valueVC3 ;

  // actionvalue method get_valueVC4
  assign get_valueVC4 = vir_chnl_4_D_OUT ;
  assign RDY_get_valueVC4 = vir_chnl_4_EMPTY_N ;
  assign CAN_FIRE_get_valueVC4 = vir_chnl_4_EMPTY_N ;
  assign WILL_FIRE_get_valueVC4 = EN_get_valueVC4 ;

  // actionvalue method get_valueVC5
  assign get_valueVC5 = vir_chnl_5_D_OUT ;
  assign RDY_get_valueVC5 = vir_chnl_5_EMPTY_N ;
  assign CAN_FIRE_get_valueVC5 = vir_chnl_5_EMPTY_N ;
  assign WILL_FIRE_get_valueVC5 = EN_get_valueVC5 ;

  // actionvalue method get_valueVC6
  assign get_valueVC6 = vir_chnl_6_D_OUT ;
  assign RDY_get_valueVC6 = vir_chnl_6_EMPTY_N ;
  assign CAN_FIRE_get_valueVC6 = vir_chnl_6_EMPTY_N ;
  assign WILL_FIRE_get_valueVC6 = EN_get_valueVC6 ;

  // submodule input_link
  FIFO2 #(.width(32'd32), .guarded(1'd1)) input_link(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(input_link_D_IN),
						     .ENQ(input_link_ENQ),
						     .DEQ(input_link_DEQ),
						     .CLR(input_link_CLR),
						     .D_OUT(input_link_D_OUT),
						     .FULL_N(input_link_FULL_N),
						     .EMPTY_N(input_link_EMPTY_N));

  // submodule vir_chnl_1
  FIFO2 #(.width(32'd32), .guarded(1'd1)) vir_chnl_1(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(vir_chnl_1_D_IN),
						     .ENQ(vir_chnl_1_ENQ),
						     .DEQ(vir_chnl_1_DEQ),
						     .CLR(vir_chnl_1_CLR),
						     .D_OUT(vir_chnl_1_D_OUT),
						     .FULL_N(vir_chnl_1_FULL_N),
						     .EMPTY_N(vir_chnl_1_EMPTY_N));

  // submodule vir_chnl_2
  FIFO2 #(.width(32'd32), .guarded(1'd1)) vir_chnl_2(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(vir_chnl_2_D_IN),
						     .ENQ(vir_chnl_2_ENQ),
						     .DEQ(vir_chnl_2_DEQ),
						     .CLR(vir_chnl_2_CLR),
						     .D_OUT(vir_chnl_2_D_OUT),
						     .FULL_N(vir_chnl_2_FULL_N),
						     .EMPTY_N(vir_chnl_2_EMPTY_N));

  // submodule vir_chnl_3
  FIFO2 #(.width(32'd32), .guarded(1'd1)) vir_chnl_3(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(vir_chnl_3_D_IN),
						     .ENQ(vir_chnl_3_ENQ),
						     .DEQ(vir_chnl_3_DEQ),
						     .CLR(vir_chnl_3_CLR),
						     .D_OUT(vir_chnl_3_D_OUT),
						     .FULL_N(vir_chnl_3_FULL_N),
						     .EMPTY_N(vir_chnl_3_EMPTY_N));

  // submodule vir_chnl_4
  FIFO2 #(.width(32'd32), .guarded(1'd1)) vir_chnl_4(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(vir_chnl_4_D_IN),
						     .ENQ(vir_chnl_4_ENQ),
						     .DEQ(vir_chnl_4_DEQ),
						     .CLR(vir_chnl_4_CLR),
						     .D_OUT(vir_chnl_4_D_OUT),
						     .FULL_N(vir_chnl_4_FULL_N),
						     .EMPTY_N(vir_chnl_4_EMPTY_N));

  // submodule vir_chnl_5
  FIFO2 #(.width(32'd32), .guarded(1'd1)) vir_chnl_5(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(vir_chnl_5_D_IN),
						     .ENQ(vir_chnl_5_ENQ),
						     .DEQ(vir_chnl_5_DEQ),
						     .CLR(vir_chnl_5_CLR),
						     .D_OUT(vir_chnl_5_D_OUT),
						     .FULL_N(vir_chnl_5_FULL_N),
						     .EMPTY_N(vir_chnl_5_EMPTY_N));

  // submodule vir_chnl_6
  FIFO2 #(.width(32'd32), .guarded(1'd1)) vir_chnl_6(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(vir_chnl_6_D_IN),
						     .ENQ(vir_chnl_6_ENQ),
						     .DEQ(vir_chnl_6_DEQ),
						     .CLR(vir_chnl_6_CLR),
						     .D_OUT(vir_chnl_6_D_OUT),
						     .FULL_N(vir_chnl_6_FULL_N),
						     .EMPTY_N(vir_chnl_6_EMPTY_N));

  // rule RL_read_input_link_and_send_to_VC_odd
  assign CAN_FIRE_RL_read_input_link_and_send_to_VC_odd =
	     input_link_EMPTY_N && vir_chnl_1_FULL_N && vir_chnl_3_FULL_N &&
	     vir_chnl_5_FULL_N &&
	     cycle ;
  assign WILL_FIRE_RL_read_input_link_and_send_to_VC_odd =
	     CAN_FIRE_RL_read_input_link_and_send_to_VC_odd ;

  // rule RL_read_input_link_and_send_to_VC_even
  assign CAN_FIRE_RL_read_input_link_and_send_to_VC_even =
	     input_link_EMPTY_N && vir_chnl_2_FULL_N && vir_chnl_4_FULL_N &&
	     vir_chnl_6_FULL_N &&
	     !cycle ;
  assign WILL_FIRE_RL_read_input_link_and_send_to_VC_even =
	     CAN_FIRE_RL_read_input_link_and_send_to_VC_even ;

  // rule RL_invert_cycle
  assign CAN_FIRE_RL_invert_cycle = 1'd1 ;
  assign WILL_FIRE_RL_invert_cycle = 1'd1 ;

  // register cycle
  assign cycle_D_IN = cycle + 1'd1 ;
  assign cycle_EN = 1'd1 ;

  // register my_id
  assign my_id_D_IN = 32'h0 ;
  assign my_id_EN = 1'b0 ;

  // submodule input_link
  assign input_link_D_IN = put_value_flit ;
  assign input_link_ENQ = EN_put_value ;
  assign input_link_DEQ =
	     WILL_FIRE_RL_read_input_link_and_send_to_VC_even ||
	     WILL_FIRE_RL_read_input_link_and_send_to_VC_odd ;
  assign input_link_CLR = 1'b0 ;

  // submodule vir_chnl_1
  assign vir_chnl_1_D_IN = input_link_D_OUT ;
  assign vir_chnl_1_ENQ =
	     WILL_FIRE_RL_read_input_link_and_send_to_VC_odd &&
	     _0_CONCAT_input_link_first__1_BIT_31_2_3_EQ_my__ETC___d15 ;
  assign vir_chnl_1_DEQ = EN_get_valueVC1 ;
  assign vir_chnl_1_CLR = 1'b0 ;

  // submodule vir_chnl_2
  assign vir_chnl_2_D_IN = input_link_D_OUT ;
  assign vir_chnl_2_ENQ =
	     WILL_FIRE_RL_read_input_link_and_send_to_VC_even &&
	     _0_CONCAT_input_link_first__1_BIT_31_2_3_EQ_my__ETC___d15 ;
  assign vir_chnl_2_DEQ = EN_get_valueVC2 ;
  assign vir_chnl_2_CLR = 1'b0 ;

  // submodule vir_chnl_3
  assign vir_chnl_3_D_IN = input_link_D_OUT ;
  assign vir_chnl_3_ENQ =
	     WILL_FIRE_RL_read_input_link_and_send_to_VC_odd &&
	     !_0_CONCAT_input_link_first__1_BIT_31_2_3_EQ_my__ETC___d15 &&
	     _0_CONCAT_input_link_first__1_BIT_31_2_3_SLT_my_ETC___d17 ;
  assign vir_chnl_3_DEQ = EN_get_valueVC3 ;
  assign vir_chnl_3_CLR = 1'b0 ;

  // submodule vir_chnl_4
  assign vir_chnl_4_D_IN = input_link_D_OUT ;
  assign vir_chnl_4_ENQ =
	     WILL_FIRE_RL_read_input_link_and_send_to_VC_even &&
	     !_0_CONCAT_input_link_first__1_BIT_31_2_3_EQ_my__ETC___d15 &&
	     _0_CONCAT_input_link_first__1_BIT_31_2_3_SLT_my_ETC___d17 ;
  assign vir_chnl_4_DEQ = EN_get_valueVC4 ;
  assign vir_chnl_4_CLR = 1'b0 ;

  // submodule vir_chnl_5
  assign vir_chnl_5_D_IN = input_link_D_OUT ;
  assign vir_chnl_5_ENQ =
	     WILL_FIRE_RL_read_input_link_and_send_to_VC_odd &&
	     !_0_CONCAT_input_link_first__1_BIT_31_2_3_EQ_my__ETC___d15 &&
	     !_0_CONCAT_input_link_first__1_BIT_31_2_3_SLT_my_ETC___d17 ;
  assign vir_chnl_5_DEQ = EN_get_valueVC5 ;
  assign vir_chnl_5_CLR = 1'b0 ;

  // submodule vir_chnl_6
  assign vir_chnl_6_D_IN = input_link_D_OUT ;
  assign vir_chnl_6_ENQ =
	     WILL_FIRE_RL_read_input_link_and_send_to_VC_even &&
	     !_0_CONCAT_input_link_first__1_BIT_31_2_3_EQ_my__ETC___d15 &&
	     !_0_CONCAT_input_link_first__1_BIT_31_2_3_SLT_my_ETC___d17 ;
  assign vir_chnl_6_DEQ = EN_get_valueVC6 ;
  assign vir_chnl_6_CLR = 1'b0 ;

  // remaining internal signals
  assign _0_CONCAT_input_link_first__1_BIT_31_2_3_EQ_my__ETC___d15 =
	     b__h929 == my_id ;
  assign _0_CONCAT_input_link_first__1_BIT_31_2_3_SLT_my_ETC___d17 =
	     (b__h929 ^ 32'h80000000) < (my_id ^ 32'h80000000) ;
  assign b__h929 = { 31'd0, input_link_D_OUT[31] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cycle <= `BSV_ASSIGNMENT_DELAY 1'd0;
	my_id <= `BSV_ASSIGNMENT_DELAY my_addr;
      end
    else
      begin
        if (cycle_EN) cycle <= `BSV_ASSIGNMENT_DELAY cycle_D_IN;
	if (my_id_EN) my_id <= `BSV_ASSIGNMENT_DELAY my_id_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cycle = 1'h0;
    my_id = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkChainRouterVC


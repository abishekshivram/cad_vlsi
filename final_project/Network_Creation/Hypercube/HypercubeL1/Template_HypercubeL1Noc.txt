package $PACKAGE_NAME;
// This package instantiates all the nodeL1_s and connects them in chain topology

import Shared::*;
import Parameters::*;

import FIFO :: * ;
import Core :: * ;

import HypercubeL1Node0VC :: *;
import HypercubeL1Node1VC :: *;
import HypercubeL1Node2VC :: *;
import HypercubeL1Node3VC :: *;
import HypercubeL1Node4VC :: *;
import HypercubeL1Node5VC :: *;
import HypercubeL1Node6VC :: *;
import HypercubeL1Node7VC :: *;

import HypercubeL2Noc :: *;



(* synthesize *)
module mkHypercubeL1Noc (Empty);

    // INSTANTIATION OF L1 NODES
$nodes_inst

    // INSTANTIATION OF L2 NODES
    // IMPLEMENTING EIGHT HYPERCUBES HERE
$EIGHT_NETWORKS_HYPERCUBE_CONNECTED    

    // CONNECTING L1 NODES TO L2 NOCs
$L1_TO_L2 


    // CONNECTION OF L1 NODES START
    rule connect_Node0_to_Node1_lsb;
        let data0_1_lsb <- nodeL1_0.get_value_to_lsb();
        nodeL1_1.put_value_from_lsb(data0_1_lsb);
    endrule

    rule connect_Node0_to_Node2_mid;
        let data0_2_mid <- nodeL1_0.get_value_to_mid();
        nodeL1_2.put_value_from_mid(data0_2_mid);
    endrule

    rule connect_Node0_to_Node4_msb;
        let data0_4_msb <- nodeL1_0.get_value_to_msb();
        nodeL1_4.put_value_from_msb(data0_4_msb);
    endrule

    rule connect_Node1_to_Node0_lsb;
        let data1_0_lsb <- nodeL1_1.get_value_to_lsb();
        nodeL1_0.put_value_from_lsb(data1_0_lsb);
    endrule

    rule connect_Node1_to_Node3_mid;
        let data1_3_mid <- nodeL1_1.get_value_to_mid();
        nodeL1_3.put_value_from_mid(data1_3_mid);
    endrule

    rule connect_Node1_to_Node5_msb;
        let data1_5_msb <- nodeL1_1.get_value_to_msb();
        nodeL1_5.put_value_from_msb(data1_5_msb);
    endrule

    rule connect_Node2_to_Node3_lsb;
        let data2_3_lsb <- nodeL1_2.get_value_to_lsb();
        nodeL1_3.put_value_from_lsb(data2_3_lsb);
    endrule

    rule connect_Node2_to_Node0_mid;
        let data2_0_mid <- nodeL1_2.get_value_to_mid();
        nodeL1_0.put_value_from_mid(data2_0_mid);
    endrule

    rule connect_Node2_to_Node6_msb;
        let data2_6_msb <- nodeL1_2.get_value_to_msb();
        nodeL1_6.put_value_from_msb(data2_6_msb);
    endrule

    rule connect_Node3_to_Node2_lsb;
        let data3_2_lsb <- nodeL1_3.get_value_to_lsb();
        nodeL1_2.put_value_from_lsb(data3_2_lsb);
    endrule

    rule connect_Node3_to_Node1_mid;
        let data3_1_mid <- nodeL1_3.get_value_to_mid();
        nodeL1_1.put_value_from_mid(data3_1_mid);
    endrule

    rule connect_Node3_to_Node7_msb;
        let data3_7_msb <- nodeL1_3.get_value_to_msb();
        nodeL1_7.put_value_from_msb(data3_7_msb);
    endrule

    rule connect_Node4_to_Node5_lsb;
        let data4_5_lsb <- nodeL1_4.get_value_to_lsb();
        nodeL1_5.put_value_from_lsb(data4_5_lsb);
    endrule

    rule connect_Node4_to_Node6_mid;
        let data4_6_mid <- nodeL1_4.get_value_to_mid();
        nodeL1_6.put_value_from_mid(data4_6_mid);
    endrule

    rule connect_Node4_to_Node0_msb;
        let data4_0_msb <- nodeL1_4.get_value_to_msb();
        nodeL1_0.put_value_from_msb(data4_0_msb);
    endrule

    rule connect_Node5_to_Node4_lsb;
        let data5_4_lsb <- nodeL1_5.get_value_to_lsb();
        nodeL1_4.put_value_from_lsb(data5_4_lsb);
    endrule

    rule connect_Node5_to_Node7_mid;
        let data5_7_mid <- nodeL1_5.get_value_to_mid();
        nodeL1_7.put_value_from_mid(data5_7_mid);
    endrule

    rule connect_Node5_to_Node1_msb;
        let data5_1_msb <- nodeL1_5.get_value_to_msb();
        nodeL1_1.put_value_from_msb(data5_1_msb);
    endrule

    rule connect_Node6_to_Node7_lsb;
        let data6_7_lsb <- nodeL1_6.get_value_to_lsb();
        nodeL1_7.put_value_from_lsb(data6_7_lsb);
    endrule

    rule connect_Node6_to_Node4_mid;
        let data6_4_mid <- nodeL1_6.get_value_to_mid();
        nodeL1_4.put_value_from_mid(data6_4_mid);
    endrule

    rule connect_Node6_to_Node2_msb;
        let data6_2_msb <- nodeL1_6.get_value_to_msb();
        nodeL1_2.put_value_from_msb(data6_2_msb);
    endrule

    rule connect_Node7_to_Node6_lsb;
        let data7_6_lsb <- nodeL1_7.get_value_to_lsb();
        nodeL1_6.put_value_from_lsb(data7_6_lsb);
    endrule

    rule connect_Node7_to_Node5_mid;
        let data7_5_mid <- nodeL1_7.get_value_to_mid();
        nodeL1_5.put_value_from_mid(data7_5_mid);
    endrule

    rule connect_Node7_to_Node3_msb;
        let data7_3_msb <- nodeL1_7.get_value_to_msb();
        nodeL1_3.put_value_from_msb(data7_3_msb);
    endrule

    // CONNECTION OF L1 NODES END


endmodule
endpackage : $PACKAGE_NAME
